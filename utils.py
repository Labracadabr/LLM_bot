import asyncio
import json
import base64
from aiogram.filters import BaseFilter
from aiogram.filters.state import State, StatesGroup
import os
from settings import *
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, FSInputFile, User
from aiogram import Bot
from datetime import datetime
from config import config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TKN = config.BOT_TOKEN
bot_func: Bot = Bot(token=TKN)


# –§–∏–ª—å—Ç—Ä, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –¥–æ—Å—Ç—É–ø —é–∑–µ—Ä–∞
class Access(BaseFilter):
    # —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ id
    def __init__(self, access: list[str]) -> None:
        self.access = access

    # –≤–µ—Ä–Ω—É—Ç—å True –µ—Å–ª–∏ —é–∑–µ—Ä –≤ —Å–ø–∏—Å–∫–µ
    async def __call__(self, message: Message) -> bool:
        user_id_str = str(message.from_user.id)
        return user_id_str in self.access


# –§–∏–ª—å—Ç—Ä, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Å–ø–∏—Å–∫—É
class InList(BaseFilter):
    # —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ —Å–ª–æ–≤–∞–º–∏
    def __init__(self, array: list[str]) -> None:
        self.array = array

    async def __call__(self, message: Message) -> bool:
        return message.text in self.array


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —é–∑–µ—Ä–æ–º
class FSM(StatesGroup):
    msg_to_admin = State()            # –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    system_prompt = State()            # –æ–∂–∏–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞


# –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ tsv, –∫–æ–Ω—Å–æ–ª—å –∏ —Ç–≥ –∫–∞–Ω–∞–ª
async def log(file, key, item):
    t = str(datetime.now()).split('.')[0]
    log_text = '\t'.join((t, str(key), repr(item)))

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ tsv
    try:
        with open(file, 'a', encoding='utf-8') as f:
            print(log_text, file=f)
    except Exception as e:
        log_text += f'\nüî¥–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ tsv:\n{e}'

    # –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    print(log_text)
    # –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤ —Ç–≥-–∫–∞–Ω–∞–ª
    # if log_channel_id:
    #     try:
    #         await bot_func.send_message(chat_id=log_channel_id, text=log_text.replace(t, ''))
    #     except Exception as e:
    #         print('channel error', e)


# –∞–π–¥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
def id_from_text(text: str) -> str:
    user_id = ''
    for word in text.split():
        if word.lower().startswith('id'):
            for symbol in word:
                if symbol.isnumeric():
                    user_id += symbol
            break
    return user_id


# –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —é–∑–µ—Ä–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –±–µ–∑ username
def contact_user(user: User) -> str:
    tg_url = f'<a href="tg://user?id={user.id}">{user.full_name}</a>'
    text = f'{tg_url} id{user.id} @{user.username}'
    return text


# –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
def get_context(filename: str, key: str):
    path = f'{users_data}/{filename}.json'
    if os.path.exists(path):
        # –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±–¥
        with open(path, 'r', encoding='utf-8') as f:
            user_data: dict = json.load(f)
    else:
        user_data: dict = {}
    value = user_data.get(key)
    return value


# –∑–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
def set_context(filename: str, key: str, val):
    path = f'{users_data}/{filename}.json'

    if os.path.exists(path):
        # –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±–¥
        with open(path, 'r', encoding='utf-8') as f:
            user_data: dict = json.load(f)
    else:
        user_data: dict = {}
    old_val = user_data.get(key)

    # —Å–æ—Ö—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    user_data[key] = val
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(user_data, f, indent=2, ensure_ascii=False)
    print(filename, f'edited {key = }')
    # print(user, f'{key}: {old_val} => {val}')


# —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def delete_context(context_filename: str, user_data: dict, stream=True):
    from api_integrations.api_llm import system_message
    language = user_data.get('lang')
    sys_prompt = user_data.get('sys_prompt')

    # o-1 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç system_message
    model = user_data.get('model')
    if model == 'o-1':
        conversation_history = []
        stream = False
    else:
        conversation_history = [system_message(language, extra=sys_prompt)]

    set_context(context_filename, 'messages', conversation_history)
    if stream:
        set_context(context_filename, 'stream', True)


# –≤—ã–±–æ—Ä —è–∑—ã–∫–∞. –Ω–∞ –≤—Ö–æ–¥–µ —è–∑—ã–∫–æ–≤–æ–π –∫–æ–¥ (–ø–æ –¥–µ—Ñ–æ–ª—Ç—É en), –Ω–∞ –≤—ã—Ö–æ–¥–µ —Å–ª–æ–≤–∞—Ä—å —Å –ª–µ–∫—Å–∏–∫–æ–π —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞
def load_lexicon(language: str) -> dict[str:str]:
    if language not in available_languages:
        language = 'en'
    lexicon_module = __import__(f'lexic.{language}', fromlist=[''])
    return lexicon_module.lexicon


def check_missing_keys(languages):
    lexic_keys_sets = []
    for lang in languages:
        lexic_keys_sets.append(set(load_lexicon(language=lang).keys()))

    # find the set with missing keys
    alert = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–µ–∫—Å–∏–∫–∞ –≤ —è–∑—ã–∫–µ:'
    for i, keys in enumerate(lexic_keys_sets):
        missing_keys = lexic_keys_sets[i-1] - keys
        if missing_keys:
            alert += f'\n{languages[i]}: {missing_keys}'

    if '\n' in alert:
        return alert
    return None


# –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ª–∏ –Ω–∞ –º–µ—Å—Ç–µ
def check_files():
    os.makedirs(users_data, exist_ok=True)
    file_list = [logs]
    for file in file_list:
        if not os.path.isfile(file):
            if file.endswith('json'):
                with open(file, 'w', encoding='utf-8') as f:
                    print('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω:', file)
                    print('{}', file=f)
            elif file.endswith('sv'):
                with open(file, 'w', encoding='utf-8') as f:
                    print('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω:', file)
                    print('\t'.join(('Time', 'User', 'Action')), file=f)

            elif 'tasks' in file:
                print()
                exit(f"–û—à–∏–±–∫–∞! –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ {file}")

    missing_keys = check_missing_keys(languages=available_languages)
    print(missing_keys if missing_keys else 'OK')


# —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å json –≤ —É–¥–æ–±–Ω–æ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
def save_json(data: dict, filename: str):
    if not filename.endswith('.json'):
        filename += '.json'
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    print(filename, 'saved')


# —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º
async def bot_download(file_id: str, msg: Message, bot: Bot, path) -> None:
    # todo user id + lexicon
    delete = await msg.answer(text='Loading...')
    await bot.download(file=file_id, destination=path)
    await bot.delete_message(chat_id=msg.from_user.id, message_id=delete.message_id)


# –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
def encode_image(image_path: str):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')

